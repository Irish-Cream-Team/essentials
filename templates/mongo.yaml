{{- $replicaset := default false .Values.essentials.mongo.replicaset -}}
{{- if .Values.essentials.mongo.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.essentials.mongo.name | default "mongo" }}
  labels:
    {{- include "master-chart.labels" . | nindent 4 }}
    app: {{ .Values.essentials.mongo.name | default "mongo"}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.essentials.mongo.name | default "mongo"}}
  template:
    metadata:
      labels:
        app: {{ .Values.essentials.mongo.name | default "mongo"}}
    spec:
      imagePullSecrets:
      {{- range .Values.essentials.mongo.PullSecrets }}
        - name: {{ . }}
      {{- end }}
      containers:
        - name: {{ .Values.essentials.mongo.name | default "mongo"}}
          {{- if $replicaset }}
          image: {{ .Values.essentials.mongo.image | default "harborreg-2.northeurope.cloudapp.azure.com/library/mongo:replicaSet" }}
          {{- else }}
          image: {{ .Values.essentials.mongo.image | default "mongo"}}
          {{- end }}
          ports:
            - containerPort: {{ .Values.essentials.mongo.port | default "27017"}}
              name: {{ .Values.essentials.mongo.name | default "mongo"}}
      volumes:
      - name: test-mongo
        configMap:
          name: test-mongo
          defaultMode: 0745
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.essentials.mongo.name | default "mongo"}}
spec:
  selector:
    app: {{ .Values.essentials.mongo.name | default "mongo"}}
  ports:
    - protocol: TCP
      name: mongo
      port: {{ .Values.essentials.mongo.port | default 27017 }}
      targetPort: {{ .Values.essentials.mongo.port | default 27017}}
---
{{- if $replicaset }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-mongo-replicaset
data:
  init-mongo-replicaset.sh: |
    #!/bin/sh    
    ATTEMPTS=0 ; LIMIT=59 ;

    mongo --host localhost --eval 'rs.initiate({_id: "rs0", members: [{_id: 0, host:"localhost:27017"}]})';
  
    STATUS=$?
    
    echo  $STATUS
    
    until [ $STATUS = 0 ]
    do
      ATTEMPTS=`expr $ATTEMPTS + 1` ;
      echo \"Failed attempts: $ATTEMPTS\" ;
      if [ $ATTEMPTS -gt $LIMIT ]; then
        exit 1 ;
      fi ;
      sleep 2 ; # 1 second intervals between attempts
      
      mongo --host mongo --eval 'rs.initiate({_id: "rs0", members: [{_id: 0, host:"mongo:27017"}]})';

      STATUS=$? ;
    
    done ;
    set -e ; # reset `e` as active
---

apiVersion: batch/v1
kind: Job
metadata:
  name: "mongo-init"
  labels:
    {{- include "master-chart.labels" . | nindent 4 }}
    app: {{ default "mongo-init"}}
spec:
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: {{ default "mongo-init"}}
    spec:
      containers:
        - name: "mongo-init"
          image: {{ .Values.essentials.mongo.image | default "harborreg-2.northeurope.cloudapp.azure.com/library/mongo:replicaSet"}}
          command: ["/bin/sh" , "/init/init-mongo-replicaset.sh"]
          volumeMounts:
            - name: init-mongo-replicaset
              mountPath: "/init"
      volumes:
        - name: init-mongo-replicaset
          configMap:
            name: init-mongo-replicaset
            defaultMode: 0745
      restartPolicy: OnFailure
{{- end }}
{{- end -}}
