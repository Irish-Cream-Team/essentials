{{- $replicaset := default false .Values.essentials.mongo.replicaset -}}
{{- if .Values.essentials.mongo.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.essentials.mongo.name | default "mongo" }}
  labels:
    {{- include "master-chart.labels" . | nindent 4 }}
    app: {{ .Values.essentials.mongo.name | default "mongo"}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.essentials.mongo.name | default "mongo"}}
  template:
    metadata:
      labels:
        app: {{ .Values.essentials.mongo.name | default "mongo"}}
    spec:
      imagePullSecrets:
      {{- range .Values.essentials.mongo.PullSecrets }}
        - name: {{ . }}
      {{- end }}
      containers:
        - name: {{ .Values.essentials.mongo.name | default "mongo"}}
          {{- if $replicaset }}
          image: "harborreg-2.northeurope.cloudapp.azure.com/library/mongo:replicaSet"
          # command: ["/bin/sh" , "/test/test-mongo.sh"]
          volumeMounts:
            - name: test-mongo
              mountPath: "/test"
          lifecycle:
            postStart:
              exec:
                command: ["/test/test-mongo.sh"]
          {{- else }}
          image: {{ .Values.essentials.mongo.image | default "mongo"}}
          {{- end }}
          ports:
            - containerPort: {{ .Values.essentials.mongo.port | default "27017"}}
              name: {{ .Values.essentials.mongo.name | default "mongo"}}
      volumes:
      - name: test-mongo
        configMap:
          name: test-mongo
          defaultMode: 0745
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.essentials.mongo.name | default "mongo"}}
spec:
  selector:
    app: {{ .Values.essentials.mongo.name | default "mongo"}}
  ports:
    - protocol: TCP
      name: mongo
      port: {{ .Values.essentials.mongo.port | default 27017 }}
      targetPort: {{ .Values.essentials.mongo.port | default 27017}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-mongo
data:
  test-mongo.sh: |
    #!/bin/sh
    
    # while [ "$(grep -v "rem_address" /proc/net/tcp | grep 6989)" = "" ];
    # do
    #   echo "wating for monog to listen on port 27017"
    # done;
    sleep 3
    # curl 127.0.0.1:27017 2&>1;
    mongo --host localhost --eval 'rs.initiate({_id: "rs0", members: [{_id: 0, host:"localhost:27017"}]})';
    touch test-see-if-works;
    sleep 3
    mongo --port 27017 --host localhost --eval 'cfg =rs.conf(); cfg.members[0].host = "mongo:27017"; rs.reconfig(cfg);';
#     mongod --port 37017 --replSet rs0 --bind_ip localhost
#     db.adminCommand( { createRole: "systemreplsetRole",privileges: [{ resource: { db: "local", collection: "system.replset" }, actions: ["find","update"] }],roles: []} );
# db.createUser( { user: "myUserAdmins", pwd: "mimi1990", roles: [ { role: "userAdminAnyDatabase", db: "admin" }]  })
   
{{- end -}}
